{"version":3,"sources":["Form.js","FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","currencies","sort","a","b","name","filter","el","code","map","length","slice","react_default","createElement","key","type","value","fromCurrencyValue","onChange","fromCurrency","toCurrencyValue","toCurrency","FormContainer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","_event$target","target","parseInt","setState","defineProperty","rates","fetchCurrencies","fetchExchangeRates","prevProps","prevState","snapshot","_this$state","fromCode","getCodeFromCurrency","toCode","rate","Math","round","calculateExchangeRate","parseFloat","fetch","response","json","data","allCurrencies","flat","uniqueCurrencies","Map","_iterator","Symbol","iterator","_iteratorNormalCompletion","_step","next","done","currency","has","undefined","set","push","baseUrl","quotes","fromRate","concat","currencyObject","find","src_Form","React","Component","App","className","FormContainer_FormContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.460013dc.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Form (props) {\r\n    const state = props.state\r\n    const currencies = state.currencies\r\n        .sort((a, b) => a.name < b.name ? -1 : 1)\r\n        .filter(el => el.code !== \"(none)\")\r\n        .map(el => {\r\n            let code = el.code;\r\n            if(el.code.length !== 3) code = code.slice(0, 3) //Remove [G] at end of some codes\r\n            return <option key={code}>{el.name}</option>\r\n        });\r\n    \r\n    return (\r\n        <form>\r\n            <input \r\n            name=\"fromCurrencyValue\"\r\n            type=\"number\"\r\n            value={state.fromCurrencyValue}\r\n            onChange={props.onChange} \r\n            />\r\n\r\n            <select \r\n            name=\"fromCurrency\"\r\n            value={state.fromCurrency}\r\n            onChange={props.onChange}>\r\n                {currencies}\r\n            </select>\r\n\r\n            <br />\r\n\r\n            <input \r\n            name=\"toCurrencyValue\" \r\n            type=\"number\"\r\n            value={state.toCurrencyValue} \r\n            onChange={props.onChange}\r\n            />\r\n\r\n            <select \r\n            name=\"toCurrency\"\r\n            value={state.toCurrency}\r\n            onChange={props.onChange}>\r\n                {currencies}\r\n            </select>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\"\r\nimport Form from \"./Form\"\r\n\r\nexport default class FormContainer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            fromCurrencyValue: 0,\r\n            toCurrencyValue: 0,\r\n            currencies: [],\r\n            rates: {},\r\n            fromCurrency: 'Afghan afghani',\r\n            toCurrency: 'Afghan afghani',\r\n        };\r\n    }\r\n\r\n    async componentDidMount(){\r\n        // fetch data from api and  store in state\r\n        const currencies = await this.fetchCurrencies();\r\n        const rates = await this.fetchExchangeRates();\r\n        this.setState({currencies: currencies, rates: rates})\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        // Do calculations and display result\r\n        const {fromCurrency, toCurrency} = this.state\r\n        const fromCode = this.getCodeFromCurrency(fromCurrency)\r\n        const toCode = this.getCodeFromCurrency(toCurrency)\r\n        const rate = Math.round(this.calculateExchangeRate(fromCode, toCode) * 100) / 100\r\n\r\n        if(this.state.fromCurrency !== this.state.toCurrency){\r\n            if(this.state.fromCurrencyValue !== prevState.fromCurrencyValue) {\r\n                this.setState({toCurrencyValue: parseFloat(this.state.fromCurrencyValue) * rate})\r\n            }\r\n\r\n            if(this.state.toCurrencyValue !== prevState.toCurrencyValue) {\r\n                this.setState({fromCurrencyValue: parseFloat(this.state.toCurrencyValue) / rate})\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async fetchCurrencies() {\r\n        const url = \"https://restcountries.eu/rest/v2/all?fields=currencies\";\r\n        const response = await fetch(url)\r\n        const data = await response.json()\r\n\r\n        let allCurrencies = data.map(el => el.currencies).flat()\r\n        let uniqueCurrencies = [];\r\n        const map = new Map();\r\n\r\n        for(const currency of allCurrencies){\r\n            if(!map.has(currency.code) && currency.code !== undefined){\r\n                map.set(currency.code, true)\r\n                uniqueCurrencies.push(currency)\r\n            }\r\n        }\r\n\r\n        return uniqueCurrencies;\r\n    }\r\n\r\n    async fetchExchangeRates() {\r\n        const apiKey =  \"87b72015c61840739f82c13f99bf8240\";\r\n        const baseUrl = `http://apilayer.net/api/live?access_key=${apiKey}&source=USD`\r\n\r\n        const response = await fetch(baseUrl);\r\n        const data = await response.json()\r\n\r\n        return data.quotes;\r\n    }\r\n\r\n    calculateExchangeRate(fromCurrency, toCurrency) {\r\n        const fromRate = this.state.rates[`USD${fromCurrency}`]\r\n        const toRate = this.state.rates[`USD${toCurrency}`]\r\n\r\n        return toRate / fromRate;\r\n    }\r\n\r\n    getCodeFromCurrency(currency) {\r\n        const currencyObject = this.state.currencies.find(el => el[\"name\"] === currency)\r\n        if(currencyObject !== undefined) return currencyObject[\"code\"]\r\n    }\r\n\r\n    onChange = (event) => {\r\n        let {name, value} = event.target\r\n\r\n        // Set state of controlled number input tags\r\n        if(name === \"fromCurrencyValue\" || name === \"toCurrencyValue\") {\r\n            if(parseInt(value) < 0 || value.length === 0) return;\r\n            if(value[0] === \"0\" && value.length > 1) value = value.slice(1)\r\n            this.setState({[name]: value})\r\n        }\r\n\r\n        // Set state of controlled select tags\r\n        if(name === \"fromCurrency\" || name === \"toCurrency\") {\r\n            this.setState({[name]: value})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form onChange={this.onChange} state={this.state}/>\r\n                <p>{this.state.fromCurrencyValue} {this.state.fromCurrency} ({this.getCodeFromCurrency(this.state.fromCurrency) || \"AFN\"})</p>\r\n                <p>equals</p>\r\n                <p>{this.state.toCurrencyValue} {this.state.toCurrency} ({this.getCodeFromCurrency(this.state.toCurrency) || \"AFN\"})</p>\r\n                <p></p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport FormContainer from \"./FormContainer\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <FormContainer />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}