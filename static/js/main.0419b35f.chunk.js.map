{"version":3,"sources":["Form.js","FormContainer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","state","currencies","Object","keys","sort","a","b","map","el","react_default","createElement","key","name","type","value","fromCurrencyValue","onChange","fromCurrency","toCurrencyValue","toCurrency","FormContainer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","_event$target","target","_this$setState","otherName","otherValue","parseInt","length","slice","_this$state","fromCode","toCode","rate","Math","round","calculateExchangeRate","console","log","concat","setState","defineProperty","apiKey","rates","fromManualChange","toManualChange","fetchCurrencies","fetchExchangeRates","url","fetch","response","json","data","obj","assign","fromRate","src_Form","React","Component","App","className","FormContainer_FormContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0419b35f.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Form (props) {\r\n    const state = props.state\r\n    const currencies = Object.keys(state.currencies)\r\n        .sort((a, b) => a < b ? -1 : 1)\r\n        .map(el =>  <option key={state.currencies[el]}>{el}</option> );\r\n    \r\n    return (\r\n        <form>\r\n            <input \r\n            name=\"fromCurrencyValue\"\r\n            type=\"number\"\r\n            value={state.fromCurrencyValue}\r\n            onChange={props.onChange} \r\n            />\r\n\r\n            <select \r\n            name=\"fromCurrency\"\r\n            value={state.fromCurrency}\r\n            onChange={props.onChange}>\r\n                {currencies}\r\n            </select>\r\n\r\n            <br />\r\n\r\n            <input \r\n            name=\"toCurrencyValue\" \r\n            type=\"number\"\r\n            value={state.toCurrencyValue} \r\n            onChange={props.onChange}\r\n            />\r\n\r\n            <select \r\n            name=\"toCurrency\"\r\n            value={state.toCurrency}\r\n            onChange={props.onChange}>\r\n                {currencies}\r\n            </select>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\"\r\nimport Form from \"./Form\"\r\n\r\nexport default class FormContainer extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.apiKey = \"3234bbf539744667a9ace28d3e3bde97\"\r\n        this.state = {\r\n            fromCurrencyValue: 0,\r\n            toCurrencyValue: 0,\r\n            currencies: {},\r\n            rates: {},\r\n            fromCurrency: 'Afghan afghani',\r\n            toCurrency: 'Afghan afghani',\r\n            fromManualChange: false, // Flag used when the user input causes a state change\r\n            toManualChange: false\r\n        };\r\n    }\r\n\r\n    async componentDidMount(){\r\n        // fetch data from api and  store in state\r\n        const currencies = await this.fetchCurrencies();\r\n        console.log(\"currencies\", currencies)\r\n        const rates = await this.fetchExchangeRates();\r\n        console.log(\"rates\", rates)\r\n        this.setState({currencies: currencies, rates: rates})\r\n    }\r\n\r\n    async fetchCurrencies() {\r\n        const url = `https://openexchangerates.org/api/currencies.json?app_id=${this.apiKey}`;\r\n        const response = await fetch(url)\r\n        const data = await response.json()\r\n\r\n        const obj = Object.assign({}, data)\r\n        const currencies = {}\r\n\r\n        for(let el in obj) currencies[obj[el]] = el\r\n\r\n        return currencies\r\n    }\r\n\r\n    async fetchExchangeRates() {\r\n        const url = `https://openexchangerates.org/api/latest.json?app_id=${this.apiKey}`;\r\n\r\n        const response = await fetch(url);\r\n        const data = await response.json()\r\n\r\n        return data.rates;\r\n    }\r\n\r\n    calculateExchangeRate(fromCurrency, toCurrency) {\r\n        const fromRate = this.state.rates[`${fromCurrency}`]\r\n        const toRate = this.state.rates[`${toCurrency}`]\r\n\r\n        return toRate / fromRate;\r\n    }\r\n\r\n    onChange = (event) => {\r\n        let {name, value} = event.target\r\n\r\n        // Set state of controlled number input tags\r\n        if(name === \"fromCurrencyValue\" || name === \"toCurrencyValue\") {\r\n            if(parseInt(value) < 0 || value.length === 0) return;\r\n            if(value[0] === \"0\" && value.length > 1) value = value.slice(1);\r\n            let otherName, otherValue;\r\n            const {fromCurrency, toCurrency} = this.state\r\n            const fromCode = this.state.currencies[fromCurrency] || \"AFN\"\r\n            const toCode = this.state.currencies[toCurrency] || \"AFN\"\r\n            const rate = Math.round(this.calculateExchangeRate(fromCode, toCode) * 100) / 100\r\n            console.log(fromCode, toCode, rate)\r\n            if(name === \"fromCurrencyValue\") {\r\n                otherName = \"toCurrencyValue\"\r\n                otherValue = `${parseInt(value) * 100 * (rate * 100) / 10000}`\r\n            }\r\n            else {\r\n                otherName = \"fromCurrencyValue\"\r\n                otherValue = `${parseInt(value) * 100 / (rate * 100)}`\r\n            }\r\n            // const amount = Math.round(parseInt(value) * 100) / 100\r\n            this.setState({\r\n                [name]: value,\r\n                [otherName]: otherValue,\r\n            })\r\n        }\r\n\r\n        // Set state of controlled select tags\r\n        if(name === \"fromCurrency\" || name === \"toCurrency\") {\r\n            this.setState({[name]: value})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Form onChange={this.onChange} state={this.state}/>\r\n                <p>{this.state.fromCurrencyValue} {this.state.fromCurrency}({this.state.currencies[this.state.fromCurrency] || \"AFN\"})</p>\r\n                <p>equals</p>\r\n                <p>{this.state.toCurrencyValue} {this.state.toCurrency}({this.state.currencies[this.state.toCurrency] || \"AFN\"})</p>\r\n                <p></p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport FormContainer from \"./FormContainer\"\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <FormContainer />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}